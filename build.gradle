plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
	id 'com.github.ben-manes.versions' version '0.42.0'
}

repositories {
    if (project.ext.properties.repoUrl) {
        maven {
            name = 'repo'
            credentials(PasswordCredentials)
            url repoUrl
        }
    }
	mavenCentral()
}

// Use Git tag/commit as version unless explicitly set elsewhere (in gradle.properties)
if ( ! version.equalsIgnoreCase("unspecified") ) {
	println "USING CUSTOM VERSION -> ${version}"
} else {
	project.version = 'git describe --dirty --tags --first-parent --always'.execute().text.trim()
	println "USING SCM VERSION -> ${version}"
}

tasks.withType(JavaCompile) {
	options.compilerArgs << '-Xlint:unchecked'
	options.deprecation = true
}

checkstyle {
    configFile = 'src/test/resources/checkstyle.xml' as File
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'com.h2database:h2:2.1.210'
	implementation 'org.apache.poi:poi-ooxml:5.2.1'

	implementation 'ch.qos.logback:logback-core:1.2.11'
	implementation 'ch.qos.logback:logback-classic:1.2.11'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.security:spring-security-web:5.6.2'
	implementation 'org.springframework.security:spring-security-config:5.6.2'
	implementation 'org.springframework.security:spring-security-test:5.6.2'

	implementation 'org.apache.commons:commons-lang3:3.12.0'

	implementation 'javax.validation:validation-api:2.0.1.Final'
}

test {
	useJUnitPlatform()
}

// https://github.com/ben-manes/gradle-versions-plugin
// reject all non stable versions
tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}
// disallow release candidates as upgradable versions from stable versions
//tasks.named("dependencyUpdates").configure {
//	rejectVersionIf {
//		isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
//	}
//}